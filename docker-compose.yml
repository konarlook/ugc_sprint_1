version: '3.9'

services:
  postgres_auth:
    container_name: postgres_auth
    image: postgres:${POSTGRES_AUTH_VERSION}
    hostname: postgres_auth
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - auth_db_data:/var/lib/postgres/data
    networks:
      - auth_network

  auth:
    container_name: auth
    env_file: .env
    restart: on-failure
    build: auth
    networks:
      - auth_network
    depends_on:
      - postgres_auth

  redis_auth:
    container_name: redis_auth
    hostname: redis_auth
    image: redis:latest
    env_file: .env
    restart: always
    volumes:
      - /redis_auth/dаta:/root/redis
      - /redis_auth/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_DATABASES: ${AUTH_REDIS_DATABASES}
    networks:
      - auth_network
    depends_on:
      - postgres_auth
      - auth

  db:
    container_name: postgres
    image: postgres:13.4
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
     - network_project

  backend:
    container_name: backend
    env_file: .env
    volumes:
      - static_data:/opt/app/static
      - media_data:/opt/app/media
    build: ./app
    networks:
     - network_project
     - auth_network
    depends_on:
      - db

  fastapi:
    container_name: movies
    env_file: .env
    restart: unless-stopped
    build: movies
    networks:
     - network_project
     - auth_network
    depends_on:
      - db

  redis:
    container_name: redis
    image: redis:latest
    env_file: .env
    restart: always
    volumes:
      - /redis/dаta:/root/redis
      - /redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DATABASES: ${REDIS_DATABASES}
    networks:
     - network_project
    depends_on:
      - db
      - backend
      - fastapi
      - elastic

  nginx:
    container_name: nginx
    image: nginx:1.19.2
    env_file: .env
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data:/data/:ro
      - static_data:/app/static
      - media_data:/app/media
    networks:
     - network_project
     - auth_network
    depends_on:
      - backend
      - fastapi

  elastic:
    container_name: elastic
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:8080
    env_file: .env
    networks:
     - network_project
    depends_on:
      - backend

  etl:
    container_name: etl
    build: ./etl
    env_file: .env
    networks:
     - network_project
    depends_on:
      - db
      - backend
      - nginx
      - elastic

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - '6831:6831/udp'
      - '16686:16686'
    networks:
      - auth_network
      - network_project

  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - kafka_network

  clickhouse-node1:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node1
    hostname: clickhouse-node1
    volumes:
      - ./ugc/clickhouse_nodes/node1:/etc/clickhouse-server
    depends_on:
      - zookeeper
    ports:
      - "8123:8123"
    networks:
      - kafka_network

  clickhouse-node2:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node2
    hostname: clickhouse-node2
    volumes:
      - ./ugc/clickhouse_nodes/node2:/etc/clickhouse-server
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  clickhouse-node3:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse-node3
    hostname: clickhouse-node3
    volumes:
      - ./ugc/clickhouse_nodes/node3:/etc/clickhouse-server
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  clickhouse-init:
    build: ./ugc/clickhouse_init
    container_name: clickhouse-init
    env_file:
      - .env
    depends_on:
      - zookeeper
      - clickhouse-node1
      - clickhouse-node2
      - clickhouse-node3
    networks:
      - kafka_network

  kafka-0:
    image: bitnami/kafka:3.4
    hostname: kafka_ugc
    ports:
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    networks:
      - kafka_network
    volumes:
      - kafka_0_data:/bitnami/kafka


  kafka-1:
    image: bitnami/kafka:3.4
    ports:
      - "9095:9095"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    networks:
      - kafka_network
    volumes:
    - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.4
    ports:
      - "9096:9096"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    networks:
      - kafka_network
    volumes:
      - kafka_2_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    networks:
      - kafka_network

  ugc-service:
    container_name: ugc_service
    build: ./ugc
    env_file: .env
    networks:
     - kafka_network
    ports:
      - "5001:5001"

  kafka-ch-etl:
    build: ./ugc/etl
    container_name: kafka-ch-etl
    networks:
      - kafka_network
    env_file:
      - .env
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2

  mongors1n1:
    container_name: mongors1n1
    image: mongo:7.0.8
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27017:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data1:/data/db
    networks:
      - mongo_network

  mongors1n2:
    container_name: mongors1n2
    image: mongo:7.0.8
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data2:/data/db
    networks:
      - mongo_network

  mongors1n3:
    container_name: mongors1n3
    image: mongo:7.0.8
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27037:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data3:/data/db
    networks:
      - mongo_network

  mongocfg1:
    container_name: mongocfg1
    image: mongo:7.0.8
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config1:/data/db
    networks:
      - mongo_network

  mongos1:
    container_name: mongos1
    image: mongo:7.0.8
    depends_on:
      - mongocfg1
    command: mongos --configdb mongors1conf/mongocfg1:27017 --port 27017 --bind_ip_all
    ports:
      - 27019:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mongo_network

  setup_mongo_conf_serv:
    image: mongo:7.0.8
    networks:
      - mongo_network
    volumes:
      - ./ugc/setup_mongo/manage_conf_serv.sh:/conf/manage_conf_serv.sh
    command: [ "bash", "conf/manage_conf_serv.sh" ]
    depends_on:
      mongocfg1:
        condition: service_started

  setup_mongo_shard_serv:
    image: mongo:7.0.8
    networks:
      - mongo_network
    volumes:
      - ./ugc/setup_mongo/manage_shard_serv.sh:/conf/manage_shard_serv.sh
    command: [ "bash", "conf/manage_shard_serv.sh" ]
    depends_on:
      setup_mongo_conf_serv:
        condition: service_completed_successfully
      mongors1n1:
        condition: service_started
      mongors1n2:
        condition: service_started
      mongors1n3:
        condition: service_started

  setup_mongo_router_serv:
    image: mongo:7.0.8
    networks:
      - mongo_network
    volumes:
      - ./ugc/setup_mongo/manage_router_add_shard.sh:/conf/manage_router_add_shard.sh
    command: [ "bash", "conf/manage_router_add_shard.sh" ]
    depends_on:
      setup_mongo_shard_serv:
        condition: service_completed_successfully
      mongos1:
        condition: service_started

volumes:
  db_data:
  static_data:
  media_data:
  auth_db_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:

networks:
  network_project:
    driver: bridge
  auth_network:
    driver: bridge
  kafka_network:
    driver: bridge
  mongo_network:
    driver: bridge
